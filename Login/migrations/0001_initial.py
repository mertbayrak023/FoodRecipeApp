# Generated by Django 5.0.2 on 2024-05-15 18:23

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Favorites',
            fields=[
                ('favoritesid', models.AutoField(primary_key=True, serialize=False)),
                ('recipeid', models.IntegerField()),
            ],
            options={
                'db_table': 'Favorites',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Images',
            fields=[
                ('Id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('ImageByte', models.BinaryField(max_length='max')),
            ],
            options={
                'db_table': 'Images_Folder',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ingredients',
            fields=[
                ('ingreid', models.AutoField(primary_key=True, serialize=False)),
                ('ingrename', models.CharField(max_length=20)),
                ('unit', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'Ingredients',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('recipe_id', models.AutoField(primary_key=True, serialize=False)),
                ('recipe_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('ingredients', models.BinaryField(max_length='max')),
                ('rating_person', models.IntegerField(default=0)),
                ('rating_num', models.IntegerField(default=0)),
                ('rating', models.FloatField(default=0)),
                ('image', models.ImageField(blank=True, null=True, upload_to='Images_Folder/', validators=[django.core.validators.FileExtensionValidator(['png', 'jpg', 'jpeg'])])),
                ('image_url', models.TextField(blank=True, null=True)),
                ('preparation', models.TextField()),
            ],
            options={
                'db_table': 'Recipe',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('commentid', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.TextField()),
                ('recipeid', models.IntegerField()),
                ('userid', models.IntegerField()),
            ],
            options={
                'db_table': 'Comments',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('userid', models.AutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=20, unique=True)),
                ('password', models.CharField(max_length=128)),
                ('email', models.CharField(max_length=50, unique=True)),
                ('favorites', models.BinaryField(blank=True, default=0, max_length='max', null=True)),
                ('recipes', models.BinaryField(blank=True, default=0, max_length='max', null=True)),
                ('is_superuser', models.BooleanField()),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('profile_photo_url', models.TextField(default='https://upload.wikimedia.org/wikipedia/commons/thumb/2/2c/Default_pfp.svg/340px-Default_pfp.svg.png?20220226140232 ')),
                ('profile_photo', models.ImageField(blank=True, null=True, upload_to='Images_Folder/', validators=[django.core.validators.FileExtensionValidator(['png', 'jpg', 'jpeg'])])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'User',
                'managed': True,
            },
        ),
    ]
